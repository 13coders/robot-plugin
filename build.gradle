
plugins {
    id 'org.jetbrains.intellij' version '0.0.37'
    id "de.undercouch.download" version '2.1.0'
}

repositories {
    mavenCentral()
}

configurations {
    ideaPlugins
    compile.extendsFrom(ideaPlugins)
}

apply plugin: 'scala'
apply plugin: 'org.jetbrains.intellij'

// Following two assignments are necessary to let the scala plugin handle both java and scala compilation
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = []

sourceSets.main.scala.srcDir 'src/main/java'
sourceSets.main.scala.srcDir 'src/main/java-gen'
sourceSets.test.scala.srcDir 'src/test/java'

dependencies {
    compile 'org.scala-lang:scala-library:2.11.7'
    ideaPlugins files("${projectDir}/lib/python.jar")
    testCompile 'junit:junit:4.12'
    testCompile 'org.scalatest:scalatest_2.11:2.2.5'
}

// Build number ranges: http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html
// Python CE plugin:    https://plugins.jetbrains.com/plugin/7322?pr=idea_ce
// Python plugin:       https://plugins.jetbrains.com/plugin/631?pr=idea
def pythonPluginForVersion = [
        'IC-LATEST-EAP-SNAPSHOT': 'https://plugins.jetbrains.com/plugin/download?pr=idea_ce&updateId=23050',
        'IC-15.0.2': 'https://plugins.jetbrains.com/plugin/download?pr=idea_ce&updateId=22400',
        'IC-14.1.6': 'https://plugins.jetbrains.com/plugin/download?pr=idea_ce&updateId=20879',
        'IU-15.0.2': 'https://plugins.jetbrains.com/plugin/download?pr=idea&updateId=22399'
]

intellij {
    def ideaVersion = System.getenv("IDEA_VERSION")
    version ideaVersion ? ideaVersion : 'IC-15.0.2'
    intellijFiles.addAll(configurations.ideaPlugins.files)

    publish {
        username 'AmailP'
        pluginId '7415'
    }
}

import de.undercouch.gradle.tasks.download.Download
task downloadJFlex(type: Download) {
    src 'https://github.com/JetBrains/intellij-community/raw/master/tools/lexer/jflex-1.4/lib/JFlex.jar'
    dest "${buildDir}/downloads/JFlex.jar"
    onlyIfNewer true
}

task downloadSkeleton(dependsOn: downloadJFlex, type: Download) {
    src 'https://github.com/JetBrains/intellij-community/raw/master/tools/lexer/idea-flex.skeleton'
    dest "${buildDir}/downloads/idea-flex.skeleton"
    onlyIfNewer true
}

task generateLexer(dependsOn: downloadSkeleton, type: JavaExec) {
    main '-jar'
    args """${buildDir}/downloads/JFlex.jar
           |--nobak
           |--charat
           |--skel
           |${buildDir}/downloads/idea-flex.skeleton
           |-d
           |${projectDir}/src/main/java-gen/amailp/intellij/robot/lexer
           |${projectDir}/src/main/resources/amailp/intellij/robot/lexer/Robot.flex""".stripMargin().split('\n').toList()
}

task downloadPython(type: Download) {
    src pythonPluginForVersion["${intellij.type}-${intellij.version}"]
    dest "${buildDir}/downloads/python.zip"
    onlyIfNewer true
}

task unzipPython(dependsOn: downloadPython, type: Copy) {
    from zipTree(downloadPython.dest)
    into "${buildDir}/plugins/"
}

task copyPythonToSandbox(dependsOn: unzipPython, type: Copy) {
    from "${buildDir}/plugins/python"
    into "${intellij.sandboxDirectory}/plugins/python"
}

task copyPythonJarToLib(dependsOn: unzipPython, type: Copy) {
    from "${buildDir}/plugins/python/lib/python.jar"
    into "${projectDir}/lib"
}

compileScala.dependsOn(copyPythonJarToLib)
compileScala.dependsOn(generateLexer)

afterEvaluate {
    tasks.getByPath('prepareSandbox').dependsOn copyPythonToSandbox
}

