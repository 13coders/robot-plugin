/* The following code was generated by JFlex 1.4.3 on 8/4/15 11:19 PM */

package amailp.intellij.robot.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import amailp.intellij.robot.elements.RobotTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/4/15 11:19 PM from the specification file
 * <tt>/Users/avaleri/src/robot-plugin/src/main/resources/amailp/intellij/robot/lexer/Robot.flex</tt>
 */
public class _RobotLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LINE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\1\52\1\53\1\2\22\0\1\3\2\0\1\5"+
    "\1\46\1\0\1\33\3\0\1\7\3\0\1\6\21\0\1\51\1\44"+
    "\1\0\1\20\1\35\6\0\1\22\4\0\1\43\1\0\1\45\1\10"+
    "\1\17\1\0\1\30\4\0\1\34\1\0\1\41\3\0\1\21\1\31"+
    "\1\36\1\27\1\11\1\0\1\15\1\0\1\13\2\0\1\32\1\40"+
    "\1\14\1\25\1\42\1\0\1\26\1\16\1\12\1\37\1\0\1\24"+
    "\1\0\1\23\1\0\1\47\1\0\1\50\7\0\1\52\u1fa2\0\2\52"+
    "\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\6\1\2\6"+
    "\1\3\1\4\1\5\2\0\1\7\2\10\2\11\2\1"+
    "\1\0\6\1\2\0\1\10\1\7\1\10\1\11\1\12"+
    "\1\1\1\13\11\1\1\14\1\15\1\16\1\0\12\1"+
    "\4\0\11\1\4\0\3\1\1\17\4\1\4\0\6\1"+
    "\4\0\4\1\4\0\2\1\4\0\1\1\4\0\1\1"+
    "\20\0\1\20\1\0\1\21\2\0\1\22\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\334\0\u0294\0\u02c0\0\u02c0\0\u02ec\0\130\0\204\0\u0318"+
    "\0\334\0\u0134\0\334\0\u0160\0\u0344\0\u0370\0\u039c\0\u03c8"+
    "\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528"+
    "\0\u0554\0\u02c0\0\u0318\0\260\0\u0580\0\334\0\u05ac\0\u05d8"+
    "\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\334"+
    "\0\334\0\334\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4"+
    "\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34"+
    "\0\u0c60\0\260\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68"+
    "\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8"+
    "\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188"+
    "\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8"+
    "\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448"+
    "\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"+
    "\0\334\0\u15d4\0\334\0\u1600\0\u162c\0\334\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\23\5\1\15\1\16\11\5\1\17\2\5\1\20\1\5"+
    "\1\11\1\5\1\21\1\22\1\23\1\24\1\25\1\13"+
    "\1\14\23\5\1\15\1\16\11\5\1\17\2\5\1\20"+
    "\1\5\1\24\3\0\2\26\46\0\1\26\1\4\1\0"+
    "\3\4\1\27\46\4\1\5\4\0\26\5\1\0\12\5"+
    "\1\0\2\5\1\0\1\5\56\0\1\6\53\0\1\6"+
    "\1\7\2\11\1\30\44\0\1\31\1\32\1\12\1\33"+
    "\1\34\51\12\1\5\4\0\1\5\1\35\24\5\1\0"+
    "\12\5\1\0\2\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\36\23\5\1\0\12\5\1\0\2\5\1\0"+
    "\1\5\50\0\1\37\4\0\1\5\4\0\3\5\1\40"+
    "\6\5\1\41\13\5\1\0\1\5\1\42\5\5\1\43"+
    "\1\44\1\45\1\0\2\5\1\0\1\5\50\0\1\46"+
    "\53\0\1\47\5\0\1\21\53\0\1\31\1\50\2\24"+
    "\1\51\44\0\1\31\1\52\1\25\1\0\52\25\1\30"+
    "\1\33\1\53\51\30\1\5\4\0\1\5\1\54\24\5"+
    "\1\0\12\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\55\23\5\1\0\12\5\1\0\2\5"+
    "\1\0\1\5\1\0\50\37\1\56\3\37\1\5\4\0"+
    "\4\5\1\57\21\5\1\0\12\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\4\0\4\5\1\60\1\5\1\61"+
    "\5\5\1\62\11\5\1\0\12\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\4\0\20\5\1\63\5\5\1\0"+
    "\12\5\1\0\2\5\1\0\1\5\1\0\1\5\4\0"+
    "\20\5\1\64\1\65\4\5\1\0\12\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\4\0\21\5\1\66\4\5"+
    "\1\0\12\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\4\0\4\5\1\67\21\5\1\0\12\5\1\0\2\5"+
    "\1\0\1\5\1\0\50\46\1\70\3\46\50\47\1\71"+
    "\3\47\1\0\1\72\52\0\1\51\1\0\52\51\1\5"+
    "\2\0\1\73\1\0\26\5\1\0\12\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\4\0\5\5\1\74\20\5"+
    "\1\0\12\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\4\0\14\5\1\75\11\5\1\0\4\5\1\76\5\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\26\5"+
    "\1\0\4\5\1\77\5\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\4\0\10\5\1\100\15\5\1\0\12\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\26\5"+
    "\1\0\2\5\1\101\7\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\4\0\11\5\1\102\14\5\1\0\12\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\4\5"+
    "\1\103\21\5\1\0\12\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\4\0\10\5\1\104\15\5\1\0\12\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\5\5"+
    "\1\105\20\5\1\0\12\5\1\0\2\5\1\0\1\5"+
    "\11\0\1\106\6\0\1\107\2\0\1\110\5\0\1\111"+
    "\23\0\1\5\4\0\26\5\1\0\3\5\1\112\6\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\21\5"+
    "\1\113\4\5\1\0\12\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\4\0\26\5\1\0\6\5\1\114\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\4\5"+
    "\1\115\21\5\1\0\12\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\4\0\11\5\1\116\14\5\1\0\12\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\26\5"+
    "\1\0\3\5\1\117\6\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\4\0\5\5\1\103\20\5\1\0\12\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\26\5"+
    "\1\0\2\5\1\120\7\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\4\0\26\5\1\0\3\5\1\121\6\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\26\5"+
    "\1\0\3\5\1\122\6\5\1\0\2\5\1\0\1\5"+
    "\12\0\1\123\53\0\1\124\53\0\1\125\63\0\1\126"+
    "\32\0\1\5\4\0\26\5\1\0\6\5\1\116\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\22\5"+
    "\1\127\3\5\1\0\12\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\4\0\25\5\1\130\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\20\5\1\131"+
    "\5\5\1\0\12\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\26\5\1\0\5\5\1\132\4\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\26\5\1\0"+
    "\4\5\1\133\5\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\20\5\1\134\5\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\26\5\1\0"+
    "\4\5\1\135\5\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\21\5\1\136\4\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\13\0\1\137\57\0\1\140\60\0"+
    "\1\141\56\0\1\142\25\0\1\5\4\0\20\5\1\143"+
    "\5\5\1\0\12\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\14\5\1\144\11\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\26\5\1\0"+
    "\3\5\1\145\6\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\4\5\1\146\21\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\7\5\1\147"+
    "\16\5\1\0\12\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\4\5\1\150\21\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\7\5\1\116"+
    "\16\5\1\0\12\5\1\0\2\5\1\0\1\5\13\0"+
    "\1\151\53\0\1\152\65\0\1\153\42\0\1\154\40\0"+
    "\1\5\4\0\17\5\1\136\6\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\5\5\1\155"+
    "\20\5\1\0\12\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\5\5\1\116\20\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\7\5\1\156"+
    "\16\5\1\0\12\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\22\5\1\157\3\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\7\5\1\160"+
    "\16\5\1\0\12\5\1\0\2\5\1\0\1\5\14\0"+
    "\1\161\43\0\1\162\75\0\1\163\47\0\1\164\32\0"+
    "\1\5\4\0\4\5\1\116\21\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\5\5\1\165"+
    "\20\5\1\0\12\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\6\5\1\166\17\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\5\5\1\100"+
    "\20\5\1\0\12\5\1\0\2\5\1\0\1\5\15\0"+
    "\1\167\57\0\1\170\61\0\1\171\56\0\1\172\22\0"+
    "\1\5\4\0\14\5\1\166\11\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\5\5\1\173"+
    "\20\5\1\0\12\5\1\0\2\5\1\0\1\5\16\0"+
    "\1\174\57\0\1\175\61\0\1\176\56\0\1\177\21\0"+
    "\1\5\4\0\6\5\1\200\17\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\4\0\1\201\12\0\1\202\53\0"+
    "\1\203\40\0\1\204\12\0\1\205\46\0\1\206\42\0"+
    "\1\5\4\0\20\5\1\136\5\5\1\0\12\5\1\0"+
    "\2\5\1\0\1\5\10\0\1\207\47\0\1\201\61\0"+
    "\1\210\51\0\1\211\47\0\1\204\53\0\1\212\12\0"+
    "\1\213\44\0\1\214\47\0\1\215\12\0\1\216\44\0"+
    "\1\217\53\0\1\220\47\0\1\212\57\0\1\221\53\0"+
    "\1\222\47\0\1\215\57\0\1\223\53\0\1\224\53\0"+
    "\1\225\53\0\1\226\53\0\1\227\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\11\12\1\1\11\7\1\1\11\1\1"+
    "\1\11\3\1\1\0\6\1\2\0\6\1\1\11\11\1"+
    "\3\11\1\0\12\1\4\0\11\1\4\0\10\1\4\0"+
    "\6\1\4\0\4\1\4\0\2\1\4\0\1\1\4\0"+
    "\1\1\20\0\1\11\1\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _RobotLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _RobotLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { yybegin(LINE); return RobotTokenTypes.Word;
          }
        case 20: break;
        case 3: 
          { yybegin(LINE); return RobotTokenTypes.Space;
          }
        case 21: break;
        case 5: 
          { yybegin(LINE); return RobotTokenTypes.Comment;
          }
        case 22: break;
        case 2: 
          { return RobotTokenTypes.BlankLine;
          }
        case 23: break;
        case 19: 
          { yybegin(LINE); return RobotTokenTypes.TestCasesHeader;
          }
        case 24: break;
        case 9: 
          { return RobotTokenTypes.Comment;
          }
        case 25: break;
        case 12: 
          { yybegin(LINE); return RobotTokenTypes.ScalarVariable;
          }
        case 26: break;
        case 11: 
          { yybegin(LINE); return RobotTokenTypes.DictionaryVariable;
          }
        case 27: break;
        case 18: 
          { yybegin(LINE); return RobotTokenTypes.VariablesHeader;
          }
        case 28: break;
        case 15: 
          { yybegin(LINE); return RobotTokenTypes.TestCaseSetting;
          }
        case 29: break;
        case 8: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(LINE); return RobotTokenTypes.IrrelevantSpaces;
          }
        case 30: break;
        case 7: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 2;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 3;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(LINE); return RobotTokenTypes.IrrelevantSpaces;
          }
        case 31: break;
        case 14: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { yybegin(LINE); return RobotTokenTypes.IrrelevantSpaces;
          }
        case 32: break;
        case 16: 
          { yybegin(LINE); return RobotTokenTypes.SettingsHeader;
          }
        case 33: break;
        case 4: 
          { yybegin(LINE); return RobotTokenTypes.Separator;
          }
        case 34: break;
        case 6: 
          { yybegin(YYINITIAL); return RobotTokenTypes.LineTerminator;
          }
        case 35: break;
        case 17: 
          { yybegin(LINE); return RobotTokenTypes.KeywordsHeader;
          }
        case 36: break;
        case 10: 
          { yybegin(LINE); return RobotTokenTypes.Ellipsis;
          }
        case 37: break;
        case 13: 
          { yybegin(LINE); return RobotTokenTypes.ListVariable;
          }
        case 38: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
