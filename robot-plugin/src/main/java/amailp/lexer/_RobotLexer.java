/* The following code was generated by JFlex 1.4.3 on 2/6/14 10:37 AM */

package amailp.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import amailp.elements.RobotTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/6/14 10:37 AM from the specification file
 * <tt>/home/avaleri/src/tesi/src/RobotPlugin/robot-plugin/src/main/resources/amailp/lexer/Robot.flex</tt>
 */
public class _RobotLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LINE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\1\50\1\51\1\2\22\0\1\3\2\0\1\5"+
    "\1\44\5\0\1\6\25\0\1\47\1\42\1\0\1\17\1\33\6\0"+
    "\1\21\4\0\1\41\1\0\1\43\1\7\1\16\1\0\1\27\4\0"+
    "\1\32\1\0\1\37\3\0\1\20\1\30\1\34\1\26\1\10\1\0"+
    "\1\14\1\0\1\12\2\0\1\31\1\36\1\13\1\24\1\40\1\0"+
    "\1\25\1\15\1\11\1\35\1\0\1\23\1\0\1\22\1\0\1\45"+
    "\1\0\1\46\7\0\1\50\u1fa2\0\2\50\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\4\1\2\6"+
    "\1\3\1\4\1\5\2\0\1\7\2\10\2\11\11\1"+
    "\1\10\1\7\1\10\1\11\14\1\1\12\1\0\12\1"+
    "\1\13\1\14\4\0\11\1\4\0\3\1\1\15\4\1"+
    "\4\0\6\1\4\0\4\1\4\0\2\1\4\0\1\1"+
    "\4\0\1\1\20\0\1\16\1\0\1\17\2\0\1\20"+
    "\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\322\0\u0222"+
    "\0\u024c\0\u024c\0\u0276\0\124\0\176\0\u02a0\0\322\0\u0126"+
    "\0\322\0\u0150\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u024c\0\u02a0\0\u0498"+
    "\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8"+
    "\0\u0612\0\u063c\0\u0666\0\322\0\u0690\0\u06ba\0\u06e4\0\u070e"+
    "\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u063c"+
    "\0\u0666\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a"+
    "\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa"+
    "\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\250\0\u0ba6\0\u0bd0"+
    "\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70"+
    "\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0"+
    "\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110"+
    "\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260"+
    "\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0"+
    "\0\u13da\0\u1404\0\u142e\0\u1458\0\322\0\u1482\0\322\0\u14ac"+
    "\0\u14d6\0\322\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\23\5"+
    "\1\14\11\5\1\15\2\5\1\16\1\5\1\11\1\5"+
    "\1\17\1\20\1\21\1\22\1\23\1\13\23\5\1\14"+
    "\11\5\1\15\2\5\1\16\1\5\1\22\3\0\2\24"+
    "\44\0\1\24\1\4\1\0\3\4\1\25\44\4\1\5"+
    "\4\0\44\5\54\0\1\6\51\0\1\6\1\7\2\11"+
    "\1\26\42\0\1\27\1\30\1\12\1\31\1\32\47\12"+
    "\1\5\4\0\1\5\1\33\42\5\1\0\1\5\4\0"+
    "\2\5\1\34\6\5\1\35\14\5\1\36\5\5\1\37"+
    "\1\40\1\41\5\5\1\0\1\5\4\0\40\5\1\42"+
    "\3\5\1\0\1\5\4\0\40\5\1\43\3\5\2\0"+
    "\1\17\51\0\1\27\1\44\2\22\1\45\42\0\1\27"+
    "\1\46\1\23\1\0\50\23\1\26\1\31\1\47\47\26"+
    "\1\5\4\0\1\5\1\50\42\5\1\0\1\5\4\0"+
    "\3\5\1\51\40\5\1\0\1\5\4\0\3\5\1\52"+
    "\1\5\1\53\5\5\1\54\30\5\1\0\1\5\4\0"+
    "\17\5\1\55\24\5\1\0\1\5\4\0\17\5\1\56"+
    "\1\57\23\5\1\0\1\5\4\0\20\5\1\60\23\5"+
    "\1\0\1\5\4\0\3\5\1\61\40\5\1\0\1\62"+
    "\4\0\44\62\1\0\1\63\4\0\44\63\2\0\1\64"+
    "\50\0\1\45\1\0\50\45\1\5\2\0\1\65\1\0"+
    "\44\5\1\0\1\5\4\0\4\5\1\66\37\5\1\0"+
    "\1\5\4\0\13\5\1\67\15\5\1\70\12\5\1\0"+
    "\1\5\4\0\31\5\1\71\12\5\1\0\1\5\4\0"+
    "\7\5\1\72\34\5\1\0\1\5\4\0\27\5\1\73"+
    "\14\5\1\0\1\5\4\0\10\5\1\74\33\5\1\0"+
    "\1\5\4\0\3\5\1\75\40\5\1\0\1\5\4\0"+
    "\7\5\1\76\34\5\1\0\1\5\4\0\4\5\1\77"+
    "\37\5\1\0\1\62\4\0\41\62\1\100\2\62\1\0"+
    "\1\63\4\0\41\63\1\101\2\63\10\0\1\102\6\0"+
    "\1\103\2\0\1\104\5\0\1\105\22\0\1\5\4\0"+
    "\30\5\1\106\13\5\1\0\1\5\4\0\20\5\1\107"+
    "\23\5\1\0\1\5\4\0\33\5\1\110\10\5\1\0"+
    "\1\5\4\0\3\5\1\111\40\5\1\0\1\5\4\0"+
    "\10\5\1\112\33\5\1\0\1\5\4\0\30\5\1\113"+
    "\13\5\1\0\1\5\4\0\4\5\1\75\37\5\1\0"+
    "\1\5\4\0\27\5\1\114\14\5\1\0\1\5\4\0"+
    "\30\5\1\115\13\5\1\0\1\5\4\0\30\5\1\116"+
    "\13\5\11\0\1\117\51\0\1\120\51\0\1\121\61\0"+
    "\1\122\31\0\1\5\4\0\33\5\1\112\10\5\1\0"+
    "\1\5\4\0\21\5\1\123\22\5\1\0\1\5\4\0"+
    "\24\5\1\124\17\5\1\0\1\5\4\0\17\5\1\125"+
    "\24\5\1\0\1\5\4\0\32\5\1\126\11\5\1\0"+
    "\1\5\4\0\31\5\1\127\12\5\1\0\1\5\4\0"+
    "\17\5\1\130\24\5\1\0\1\5\4\0\31\5\1\131"+
    "\12\5\1\0\1\5\4\0\20\5\1\132\23\5\12\0"+
    "\1\133\55\0\1\134\56\0\1\135\54\0\1\136\24\0"+
    "\1\5\4\0\17\5\1\137\24\5\1\0\1\5\4\0"+
    "\13\5\1\140\30\5\1\0\1\5\4\0\30\5\1\141"+
    "\13\5\1\0\1\5\4\0\3\5\1\142\40\5\1\0"+
    "\1\5\4\0\6\5\1\143\35\5\1\0\1\5\4\0"+
    "\3\5\1\144\40\5\1\0\1\5\4\0\6\5\1\112"+
    "\35\5\12\0\1\145\51\0\1\146\63\0\1\147\40\0"+
    "\1\150\37\0\1\5\4\0\16\5\1\132\25\5\1\0"+
    "\1\5\4\0\4\5\1\151\37\5\1\0\1\5\4\0"+
    "\4\5\1\112\37\5\1\0\1\5\4\0\6\5\1\152"+
    "\35\5\1\0\1\5\4\0\21\5\1\153\22\5\1\0"+
    "\1\5\4\0\6\5\1\154\35\5\13\0\1\155\42\0"+
    "\1\156\72\0\1\157\45\0\1\160\31\0\1\5\4\0"+
    "\3\5\1\112\40\5\1\0\1\5\4\0\4\5\1\161"+
    "\37\5\1\0\1\5\4\0\5\5\1\162\36\5\1\0"+
    "\1\5\4\0\4\5\1\72\37\5\14\0\1\163\55\0"+
    "\1\164\57\0\1\165\54\0\1\166\21\0\1\5\4\0"+
    "\13\5\1\162\30\5\1\0\1\5\4\0\4\5\1\167"+
    "\37\5\15\0\1\170\55\0\1\171\57\0\1\172\54\0"+
    "\1\173\20\0\1\5\4\0\5\5\1\174\36\5\4\0"+
    "\1\175\11\0\1\176\51\0\1\177\37\0\1\200\11\0"+
    "\1\201\44\0\1\202\41\0\1\5\4\0\17\5\1\132"+
    "\24\5\7\0\1\203\46\0\1\175\56\0\1\204\47\0"+
    "\1\205\46\0\1\200\51\0\1\206\11\0\1\207\42\0"+
    "\1\210\46\0\1\211\11\0\1\212\42\0\1\213\51\0"+
    "\1\214\46\0\1\206\54\0\1\215\51\0\1\216\46\0"+
    "\1\211\54\0\1\217\51\0\1\220\51\0\1\221\51\0"+
    "\1\222\51\0\1\223\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\11\10\1\1\11\7\1\1\11\1\1"+
    "\1\11\32\1\1\11\1\0\14\1\4\0\11\1\4\0"+
    "\10\1\4\0\6\1\4\0\4\1\4\0\2\1\4\0"+
    "\1\1\4\0\1\1\20\0\1\11\1\0\1\11\2\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _RobotLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _RobotLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { yybegin(LINE); return RobotTokenTypes.TestCasesHeader;
          }
        case 18: break;
        case 4: 
          { yybegin(LINE); return RobotTokenTypes.Separator;
          }
        case 19: break;
        case 13: 
          { yybegin(LINE); return RobotTokenTypes.TestCaseSetting;
          }
        case 20: break;
        case 15: 
          { yybegin(LINE); return RobotTokenTypes.KeywordsHeader;
          }
        case 21: break;
        case 6: 
          { yybegin(YYINITIAL); return RobotTokenTypes.LineTerminator;
          }
        case 22: break;
        case 14: 
          { yybegin(LINE); return RobotTokenTypes.SettingsHeader;
          }
        case 23: break;
        case 10: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { yybegin(LINE); return RobotTokenTypes.IrrelevantSpaces;
          }
        case 24: break;
        case 7: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 2;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 3;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(LINE); return RobotTokenTypes.IrrelevantSpaces;
          }
        case 25: break;
        case 8: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(LINE); return RobotTokenTypes.IrrelevantSpaces;
          }
        case 26: break;
        case 9: 
          { return RobotTokenTypes.Comment;
          }
        case 27: break;
        case 2: 
          { return RobotTokenTypes.BlankLine;
          }
        case 28: break;
        case 5: 
          { yybegin(LINE); return RobotTokenTypes.Comment;
          }
        case 29: break;
        case 12: 
          { yybegin(LINE); return RobotTokenTypes.ListVariable;
          }
        case 30: break;
        case 11: 
          { yybegin(LINE); return RobotTokenTypes.Variable;
          }
        case 31: break;
        case 1: 
          { yybegin(LINE); return RobotTokenTypes.Word;
          }
        case 32: break;
        case 16: 
          { yybegin(LINE); return RobotTokenTypes.VariablesHeader;
          }
        case 33: break;
        case 3: 
          { yybegin(LINE); return RobotTokenTypes.Space;
          }
        case 34: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
